require("tidyverse")
require("geometry")
require("alphashape3d")
require("spatstat")
findEdgeClustersConvex <- function (posFileName,
clusterStatsFile,
clusterIndexPosFile,
SamplingFraction,
NNDMultiplier) {
# get time for timing execution
StartTime <- Sys.time()
#### Read the cluster statistics file ####
#cluster file path
ClusterImport <- read.csv(clusterStatsFile, skip = 10)
#### Cluster Import ####
ClusterImport <-
ClusterImport %>% select(
id=X,
Solute.Ions,
Ranged.Ions,
Total.Ions,
Center_x..nm..Ranged,
Center_y..nm..Ranged,
Center_z..nm..Ranged
) %>%
mutate(
xpos = Center_x..nm..Ranged,
ypos = Center_y..nm..Ranged,
zpos = Center_z..nm..Ranged
) %>%
filter(grepl("Cluster", id))
ClusterImportedData <- ClusterImport
# load index cluster file to define cluster centres and boundary by convex hull
clrIndxData <- read.pos(clusterIndexPosFile)
nclustersDet <- max(clrIndxData[,4])
clrHull_list <- vector("list", nclustersDet)
for (i in 1:nclustersDet) {
thisClr <- clrIndxData[clrIndxData[,4]==i,1:3]
COM <- summarise_all(thisClr,"mean")
tempList<-convhulln(thisClr)
clrHull <- thisClr[unique(array(tempList)),1:3]
clrHull$id <- i
clrHull_list[[i]] <- clrHull
}
clrHull_all <- bind_rows(clrHull_list)
#### Load filtered pos file to improve speed ####
FilterPosFile <- read.pos.sampled(posFileName, SamplingFraction)
#### Parameters For Calculating Alpha Value####
AlphaValue <<- NNDMultiplier*round(ceiling(100*(max(nndist(FilterPosFile %>% select(x,y,z), k=1)))),2)/100
print(paste0(
"Alpha Value: ",
AlphaValue,
" Sampling fraction: ",
SamplingFraction
))
#### Using alpha-shape 3d ####
M <- as.matrix(FilterPosFile[, 1:3])
# free some memory
rm(FilterPosFile)
gc()
AlphaHullShape <- ashape3d(M, alpha =  c(AlphaValue, 10))
#plot(AlphaHullShape, indexAlpha = 1)
#### Ensuring there is only one connected volume ####
comp <- components_ashape3d(AlphaHullShape, indexAlpha = "all")
NumberVolumes <- as.data.frame(table(comp[[1]]))
#### Determing which clusters are edge clusters and returning values ####
if (nrow(NumberVolumes) != 1) {
stop(paste0("Error. Multiple volumes created"))
} else{
print(paste0("Alpha value has created one volume"))
# determining which clusters are edge clusters
ClustersInHull <-
inashape3d(AlphaHullShape, indexAlpha = 1, as.matrix(clrHull_all[,1:3]))
# getting names of clusters that are edge
ClusterLocation2 <- cbind(clrHull_all, ClustersInHull) %>%
dplyr::filter(ClustersInHull==FALSE) %>%
group_by(id) %>%
summarise(ID=first(id))
TotalEdgeClusters <- sort(as.numeric(as.matrix(ClusterLocation2[,1])))
}
print(paste0(
"Toal number of clusters detected: ",
length(TotalEdgeClusters)
))
NumberOfAssignedEdgeClusters <<- length(TotalEdgeClusters)
# Pritn total exe time
EndTime <- Sys.time()
TotalTime <<- EndTime - StartTime
print(TotalTime)
EdgeClusters <<- TotalEdgeClusters
NumberClusters <<- max(as.numeric(gsub("Cluster ","",ClusterImportedData$id)))
#return(list(TotalEdgeClusters=TotalEdgeClusters, ClusterImportedData=ClusterImportedData))
}
findEdgeClustersConvex("C:\Users\Ben\Documents\GitHub\Edge-Cluster-Detection\Test Files\006_full.pos",
"C:\Users\Ben\Documents\GitHub\Edge-Cluster-Detection\Test Files\006_full - Top-Level ROI - Cluster Analysis (Ni, Cu).csv",
"C:\Users\Ben\Documents\GitHub\Edge-Cluster-Detection\Test Files\006_full.cluster.indexed.pos",
0.005,
2)
findEdgeClustersConvex("C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.pos",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full - Top-Level ROI - Cluster Analysis (Ni, Cu).csv",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.cluster.indexed.pos",
0.005,
2)
source("read.pos.sampled.R")
source("read.pos.R")
getwd()
setwd("~/GitHub/Edge-Cluster-Detection")
#This function allows one to import a pos file into R with x, y, z, and mass-to-charge-ratio information
source("read.pos.sampled.R")
source("read.pos.R")
findEdgeClustersConvex("C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.pos",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full - Top-Level ROI - Cluster Analysis (Ni, Cu).csv",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.cluster.indexed.pos",
0.005,
2)
# View Alpha shape that is generated
plot(AlphaHullShape, indexAlpha = 1)
EdgeClusters
findEdgeClustersConvex("C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.pos",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full - Top-Level ROI - Cluster Analysis (Ni, Cu).csv",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.cluster.indexed.pos",
0.05,
2)
findEdgeClustersConvex <- function (posFileName,
clusterStatsFile,
clusterIndexPosFile,
SamplingFraction,
NNDMultiplier) {
# get time for timing execution
StartTime <- Sys.time()
#### Read the cluster statistics file ####
#cluster file path
ClusterImport <- read.csv(clusterStatsFile, skip = 10)
#### Cluster Import ####
ClusterImport <-
ClusterImport %>% select(
id=X,
Solute.Ions,
Ranged.Ions,
Total.Ions,
Center_x..nm..Ranged,
Center_y..nm..Ranged,
Center_z..nm..Ranged
) %>%
mutate(
xpos = Center_x..nm..Ranged,
ypos = Center_y..nm..Ranged,
zpos = Center_z..nm..Ranged
) %>%
filter(grepl("Cluster", id))
ClusterImportedData <- ClusterImport
# load index cluster file to define cluster centres and boundary by convex hull
clrIndxData <- read.pos(clusterIndexPosFile)
nclustersDet <- max(clrIndxData[,4])
clrHull_list <- vector("list", nclustersDet)
for (i in 1:nclustersDet) {
thisClr <- clrIndxData[clrIndxData[,4]==i,1:3]
COM <- summarise_all(thisClr,"mean")
tempList<-convhulln(thisClr)
clrHull <- thisClr[unique(array(tempList)),1:3]
clrHull$id <- i
clrHull_list[[i]] <- clrHull
}
clrHull_all <- bind_rows(clrHull_list)
#### Load filtered pos file to improve speed ####
FilterPosFile <- read.pos.sampled(posFileName, SamplingFraction)
#### Parameters For Calculating Alpha Value####
AlphaValue <<- NNDMultiplier*round(ceiling(100*(max(nndist(FilterPosFile %>% select(x,y,z), k=1)))),2)/100
print(paste0(
"Alpha Value: ",
AlphaValue,
" Sampling fraction: ",
SamplingFraction
))
#### Using alpha-shape 3d ####
M <- as.matrix(FilterPosFile[, 1:3])
# free some memory
rm(FilterPosFile)
gc()
AlphaHullShape <<- ashape3d(M, alpha =  c(AlphaValue, 10))
#### Ensuring there is only one connected volume ####
comp <- components_ashape3d(AlphaHullShape, indexAlpha = "all")
NumberVolumes <- as.data.frame(table(comp[[1]]))
#### Determing which clusters are edge clusters and returning values ####
if (nrow(NumberVolumes) != 1) {
stop(paste0("Error. Multiple volumes created"))
} else{
print(paste0("Alpha value has created one volume"))
# determining which clusters are edge clusters
ClustersInHull <-
inashape3d(AlphaHullShape, indexAlpha = 1, as.matrix(clrHull_all[,1:3]))
# getting names of clusters that are edge
ClusterLocation2 <- cbind(clrHull_all, ClustersInHull) %>%
dplyr::filter(ClustersInHull==FALSE) %>%
group_by(id) %>%
summarise(ID=first(id))
TotalEdgeClusters <- sort(as.numeric(as.matrix(ClusterLocation2[,1])))
}
print(paste0(
"Toal number of clusters detected: ",
length(TotalEdgeClusters)
))
NumberOfAssignedEdgeClusters <<- length(TotalEdgeClusters)
# Pritn total exe time
EndTime <- Sys.time()
TotalTime <<- EndTime - StartTime
print(TotalTime)
EdgeClusters <<- TotalEdgeClusters
NumberClusters <<- max(as.numeric(gsub("Cluster ","",ClusterImportedData$id)))
#return(list(TotalEdgeClusters=TotalEdgeClusters, ClusterImportedData=ClusterImportedData))
}
findEdgeClustersConvex("C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.pos",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full - Top-Level ROI - Cluster Analysis (Ni, Cu).csv",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.cluster.indexed.pos",
0.0001,
2)
findEdgeClustersConvex("C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.pos",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full - Top-Level ROI - Cluster Analysis (Ni, Cu).csv",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.cluster.indexed.pos",
0.000001,
2)
findEdgeClustersConvex("C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.pos",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full - Top-Level ROI - Cluster Analysis (Ni, Cu).csv",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.cluster.indexed.pos",
0.0001,
2)
findEdgeClustersConvex("C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.pos",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full - Top-Level ROI - Cluster Analysis (Ni, Cu).csv",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.cluster.indexed.pos",
0.005,
4)
# View Alpha shape that is generated
plot(AlphaHullShape, indexAlpha = 1)
source("AlphaHull.R")
#### Parameters For Calculating Alpha Value####
# How much one would like to sample the POS file by
SamplingFraction <- 0.005
# What NND multiplier should be used to calculate alpha
AlphaNND <- 4
#This function allows one to import a pos file into R with x, y, z, and mass-to-charge-ratio information
source("read.pos.sampled.R")
source("read.pos.R")
findEdgeClustersConvex("C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.pos",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full - Top-Level ROI - Cluster Analysis (Ni, Cu).csv",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.cluster.indexed.pos",
SamplingFraction,
AlphaNND)
findEdgeClustersConvex <- function (posFileName,
clusterStatsFile,
clusterIndexPosFile,
SamplingFraction,
NNDMultiplier) {
# get time for timing execution
StartTime <- Sys.time()
#### Read the cluster statistics file ####
#cluster file path
ClusterImport <- read.csv(clusterStatsFile, skip = 10)
#### Cluster Import ####
ClusterImport <-
ClusterImport %>% select(
id=X,
Solute.Ions,
Ranged.Ions,
Total.Ions,
Center_x..nm..Ranged,
Center_y..nm..Ranged,
Center_z..nm..Ranged
) %>%
mutate(
xpos = Center_x..nm..Ranged,
ypos = Center_y..nm..Ranged,
zpos = Center_z..nm..Ranged
) %>%
filter(grepl("Cluster", id))
ClusterImportedData <- ClusterImport
# load index cluster file to define cluster centres and boundary by convex hull
clrIndxData <- read.pos(clusterIndexPosFile)
nclustersDet <- max(clrIndxData[,4])
clrHull_list <- vector("list", nclustersDet)
for (i in 1:nclustersDet) {
thisClr <- clrIndxData[clrIndxData[,4]==i,1:3]
COM <- summarise_all(thisClr,"mean")
tempList<-convhulln(thisClr)
clrHull <- thisClr[unique(array(tempList)),1:3]
clrHull$id <- i
clrHull_list[[i]] <- clrHull
}
clrHull_all <- bind_rows(clrHull_list)
#### Load filtered pos file to improve speed ####
FilterPosFile <- read.pos.sampled(posFileName, SamplingFraction)
#### Parameters For Calculating Alpha Value####
AlphaValue <<- NNDMultiplier*round(ceiling(100*(max(nndist(FilterPosFile %>% select(x,y,z), k=1)))),2)/100
print(paste0(
"Alpha Value: ",
AlphaValue,
" Sampling fraction: ",
SamplingFraction
))
#### Using alpha-shape 3d ####
M <- as.matrix(FilterPosFile[, 1:3])
# free some memory
rm(FilterPosFile)
gc()
AlphaHullShape <<- ashape3d(M, alpha =  c(AlphaValue, 10))
#### Ensuring there is only one connected volume ####
comp <- components_ashape3d(AlphaHullShape, indexAlpha = "all")
NumberVolumes <- as.data.frame(table(comp[[1]]))
#### Determing which clusters are edge clusters and returning values ####
if (nrow(NumberVolumes) != 1) {
stop(paste0("Error. Multiple volumes created"))
} else{
print(paste0("Alpha value has created one volume"))
# determining which clusters are edge clusters
ClustersInHull <-
inashape3d(AlphaHullShape, indexAlpha = 1, as.matrix(clrHull_all[,1:3]))
# getting names of clusters that are edge
ClusterLocation2 <- cbind(clrHull_all, ClustersInHull) %>%
dplyr::filter(ClustersInHull==FALSE) %>%
group_by(id) %>%
summarise(ID=first(id))
TotalEdgeClusters <- sort(as.numeric(as.matrix(ClusterLocation2[,1])))
}
print(paste0(
"Toal number of clusters detected: ",
length(TotalEdgeClusters)
))
NumberOfAssignedEdgeClusters <<- length(TotalEdgeClusters)
# Pritn total exe time
EndTime <- Sys.time()
TotalTime <<- EndTime - StartTime
print(TotalTime)
EdgeClusters <<- TotalEdgeClusters
NumberClusters <<- max(as.numeric(gsub("Cluster ","",ClusterImportedData$id)))
#return(list(TotalEdgeClusters=TotalEdgeClusters, ClusterImportedData=ClusterImportedData))
}
findEdgeClustersConvex("C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.pos",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full - Top-Level ROI - Cluster Analysis (Ni, Cu).csv",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.cluster.indexed.pos",
SamplingFraction,
AlphaNND)
#These functions allow one to import a pos file (sampled or not) into R with x, y, z, and mass-to-charge-ratio information
source("Test Files\\read.pos.sampled.R")
source("Test Files\\read.pos.R")
#### File paths for fundtion ####
findEdgeClustersConvex("Test Files\\006_full.pos",
"Test Files\\006_full - Top-Level ROI - Cluster Analysis (Ni, Cu).csv",
"Test Files\\006_full.cluster.indexed.pos",
SamplingFraction,
AlphaNND)
NumberOfAssignedEdgeClusters
source('~/GitHub/Edge-Cluster-Detection/Edge Cluster Detection.R')
source('~/GitHub/Edge-Cluster-Detection/Edge Cluster Detection.R')
