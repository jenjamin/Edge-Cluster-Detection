print(paste0(
"Alpha Value: ",
AlphaValue,
" Sampling fraction: ",
SamplingFraction
))
#### Using alpha-shape 3d ####
M <- as.matrix(FilterPosFile[, 1:3])
# free some memory
rm(FilterPosFile)
gc()
AlphaHullShape <- ashape3d(M, alpha =  c(AlphaValue, 10))
#plot(AlphaHullShape, indexAlpha = 1)
#### Ensuring there is only one connected volume ####
comp <- components_ashape3d(AlphaHullShape, indexAlpha = "all")
NumberVolumes <- as.data.frame(table(comp[[1]]))
#### Determing which clusters are edge clusters and returning values ####
if (nrow(NumberVolumes) != 1) {
stop(paste0("Error. Multiple volumes created"))
} else{
print(paste0("Alpha value has created one volume"))
# determining which clusters are edge clusters
ClustersInHull <-
inashape3d(AlphaHullShape, indexAlpha = 1, as.matrix(clrHull_all[,1:3]))
# getting names of clusters that are edge
ClusterLocation2 <- cbind(clrHull_all, ClustersInHull) %>%
dplyr::filter(ClustersInHull==FALSE) %>%
group_by(id) %>%
summarise(ID=first(id))
TotalEdgeClusters <- sort(as.numeric(as.matrix(ClusterLocation2[,1])))
}
print(paste0(
"Toal number of clusters detected: ",
length(TotalEdgeClusters)
))
NumberOfAssignedEdgeClusters <<- length(TotalEdgeClusters)
# Pritn total exe time
EndTime <- Sys.time()
TotalTime <<- EndTime - StartTime
print(TotalTime)
EdgeClusters <<- TotalEdgeClusters
NumberClusters <<- max(as.numeric(gsub("Cluster ","",ClusterImportedData$id)))
#return(list(TotalEdgeClusters=TotalEdgeClusters, ClusterImportedData=ClusterImportedData))
}
findEdgeClustersConvex("C:\Users\Ben\Documents\GitHub\Edge-Cluster-Detection\Test Files\006_full.pos",
"C:\Users\Ben\Documents\GitHub\Edge-Cluster-Detection\Test Files\006_full - Top-Level ROI - Cluster Analysis (Ni, Cu).csv",
"C:\Users\Ben\Documents\GitHub\Edge-Cluster-Detection\Test Files\006_full.cluster.indexed.pos",
0.005,
2)
findEdgeClustersConvex("C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.pos",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full - Top-Level ROI - Cluster Analysis (Ni, Cu).csv",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.cluster.indexed.pos",
0.005,
2)
source("read.pos.sampled.R")
source("read.pos.R")
getwd()
setwd("~/GitHub/Edge-Cluster-Detection")
#This function allows one to import a pos file into R with x, y, z, and mass-to-charge-ratio information
source("read.pos.sampled.R")
source("read.pos.R")
findEdgeClustersConvex("C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.pos",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full - Top-Level ROI - Cluster Analysis (Ni, Cu).csv",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.cluster.indexed.pos",
0.005,
2)
# View Alpha shape that is generated
plot(AlphaHullShape, indexAlpha = 1)
EdgeClusters
findEdgeClustersConvex("C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.pos",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full - Top-Level ROI - Cluster Analysis (Ni, Cu).csv",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.cluster.indexed.pos",
0.05,
2)
findEdgeClustersConvex <- function (posFileName,
clusterStatsFile,
clusterIndexPosFile,
SamplingFraction,
NNDMultiplier) {
# get time for timing execution
StartTime <- Sys.time()
#### Read the cluster statistics file ####
#cluster file path
ClusterImport <- read.csv(clusterStatsFile, skip = 10)
#### Cluster Import ####
ClusterImport <-
ClusterImport %>% select(
id=X,
Solute.Ions,
Ranged.Ions,
Total.Ions,
Center_x..nm..Ranged,
Center_y..nm..Ranged,
Center_z..nm..Ranged
) %>%
mutate(
xpos = Center_x..nm..Ranged,
ypos = Center_y..nm..Ranged,
zpos = Center_z..nm..Ranged
) %>%
filter(grepl("Cluster", id))
ClusterImportedData <- ClusterImport
# load index cluster file to define cluster centres and boundary by convex hull
clrIndxData <- read.pos(clusterIndexPosFile)
nclustersDet <- max(clrIndxData[,4])
clrHull_list <- vector("list", nclustersDet)
for (i in 1:nclustersDet) {
thisClr <- clrIndxData[clrIndxData[,4]==i,1:3]
COM <- summarise_all(thisClr,"mean")
tempList<-convhulln(thisClr)
clrHull <- thisClr[unique(array(tempList)),1:3]
clrHull$id <- i
clrHull_list[[i]] <- clrHull
}
clrHull_all <- bind_rows(clrHull_list)
#### Load filtered pos file to improve speed ####
FilterPosFile <- read.pos.sampled(posFileName, SamplingFraction)
#### Parameters For Calculating Alpha Value####
AlphaValue <<- NNDMultiplier*round(ceiling(100*(max(nndist(FilterPosFile %>% select(x,y,z), k=1)))),2)/100
print(paste0(
"Alpha Value: ",
AlphaValue,
" Sampling fraction: ",
SamplingFraction
))
#### Using alpha-shape 3d ####
M <- as.matrix(FilterPosFile[, 1:3])
# free some memory
rm(FilterPosFile)
gc()
AlphaHullShape <<- ashape3d(M, alpha =  c(AlphaValue, 10))
#### Ensuring there is only one connected volume ####
comp <- components_ashape3d(AlphaHullShape, indexAlpha = "all")
NumberVolumes <- as.data.frame(table(comp[[1]]))
#### Determing which clusters are edge clusters and returning values ####
if (nrow(NumberVolumes) != 1) {
stop(paste0("Error. Multiple volumes created"))
} else{
print(paste0("Alpha value has created one volume"))
# determining which clusters are edge clusters
ClustersInHull <-
inashape3d(AlphaHullShape, indexAlpha = 1, as.matrix(clrHull_all[,1:3]))
# getting names of clusters that are edge
ClusterLocation2 <- cbind(clrHull_all, ClustersInHull) %>%
dplyr::filter(ClustersInHull==FALSE) %>%
group_by(id) %>%
summarise(ID=first(id))
TotalEdgeClusters <- sort(as.numeric(as.matrix(ClusterLocation2[,1])))
}
print(paste0(
"Toal number of clusters detected: ",
length(TotalEdgeClusters)
))
NumberOfAssignedEdgeClusters <<- length(TotalEdgeClusters)
# Pritn total exe time
EndTime <- Sys.time()
TotalTime <<- EndTime - StartTime
print(TotalTime)
EdgeClusters <<- TotalEdgeClusters
NumberClusters <<- max(as.numeric(gsub("Cluster ","",ClusterImportedData$id)))
#return(list(TotalEdgeClusters=TotalEdgeClusters, ClusterImportedData=ClusterImportedData))
}
findEdgeClustersConvex("C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.pos",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full - Top-Level ROI - Cluster Analysis (Ni, Cu).csv",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.cluster.indexed.pos",
0.0001,
2)
findEdgeClustersConvex("C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.pos",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full - Top-Level ROI - Cluster Analysis (Ni, Cu).csv",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.cluster.indexed.pos",
0.000001,
2)
findEdgeClustersConvex("C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.pos",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full - Top-Level ROI - Cluster Analysis (Ni, Cu).csv",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.cluster.indexed.pos",
0.0001,
2)
findEdgeClustersConvex("C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.pos",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full - Top-Level ROI - Cluster Analysis (Ni, Cu).csv",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.cluster.indexed.pos",
0.005,
4)
# View Alpha shape that is generated
plot(AlphaHullShape, indexAlpha = 1)
source("AlphaHull.R")
#### Parameters For Calculating Alpha Value####
# How much one would like to sample the POS file by
SamplingFraction <- 0.005
# What NND multiplier should be used to calculate alpha
AlphaNND <- 4
#This function allows one to import a pos file into R with x, y, z, and mass-to-charge-ratio information
source("read.pos.sampled.R")
source("read.pos.R")
findEdgeClustersConvex("C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.pos",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full - Top-Level ROI - Cluster Analysis (Ni, Cu).csv",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.cluster.indexed.pos",
SamplingFraction,
AlphaNND)
findEdgeClustersConvex <- function (posFileName,
clusterStatsFile,
clusterIndexPosFile,
SamplingFraction,
NNDMultiplier) {
# get time for timing execution
StartTime <- Sys.time()
#### Read the cluster statistics file ####
#cluster file path
ClusterImport <- read.csv(clusterStatsFile, skip = 10)
#### Cluster Import ####
ClusterImport <-
ClusterImport %>% select(
id=X,
Solute.Ions,
Ranged.Ions,
Total.Ions,
Center_x..nm..Ranged,
Center_y..nm..Ranged,
Center_z..nm..Ranged
) %>%
mutate(
xpos = Center_x..nm..Ranged,
ypos = Center_y..nm..Ranged,
zpos = Center_z..nm..Ranged
) %>%
filter(grepl("Cluster", id))
ClusterImportedData <- ClusterImport
# load index cluster file to define cluster centres and boundary by convex hull
clrIndxData <- read.pos(clusterIndexPosFile)
nclustersDet <- max(clrIndxData[,4])
clrHull_list <- vector("list", nclustersDet)
for (i in 1:nclustersDet) {
thisClr <- clrIndxData[clrIndxData[,4]==i,1:3]
COM <- summarise_all(thisClr,"mean")
tempList<-convhulln(thisClr)
clrHull <- thisClr[unique(array(tempList)),1:3]
clrHull$id <- i
clrHull_list[[i]] <- clrHull
}
clrHull_all <- bind_rows(clrHull_list)
#### Load filtered pos file to improve speed ####
FilterPosFile <- read.pos.sampled(posFileName, SamplingFraction)
#### Parameters For Calculating Alpha Value####
AlphaValue <<- NNDMultiplier*round(ceiling(100*(max(nndist(FilterPosFile %>% select(x,y,z), k=1)))),2)/100
print(paste0(
"Alpha Value: ",
AlphaValue,
" Sampling fraction: ",
SamplingFraction
))
#### Using alpha-shape 3d ####
M <- as.matrix(FilterPosFile[, 1:3])
# free some memory
rm(FilterPosFile)
gc()
AlphaHullShape <<- ashape3d(M, alpha =  c(AlphaValue, 10))
#### Ensuring there is only one connected volume ####
comp <- components_ashape3d(AlphaHullShape, indexAlpha = "all")
NumberVolumes <- as.data.frame(table(comp[[1]]))
#### Determing which clusters are edge clusters and returning values ####
if (nrow(NumberVolumes) != 1) {
stop(paste0("Error. Multiple volumes created"))
} else{
print(paste0("Alpha value has created one volume"))
# determining which clusters are edge clusters
ClustersInHull <-
inashape3d(AlphaHullShape, indexAlpha = 1, as.matrix(clrHull_all[,1:3]))
# getting names of clusters that are edge
ClusterLocation2 <- cbind(clrHull_all, ClustersInHull) %>%
dplyr::filter(ClustersInHull==FALSE) %>%
group_by(id) %>%
summarise(ID=first(id))
TotalEdgeClusters <- sort(as.numeric(as.matrix(ClusterLocation2[,1])))
}
print(paste0(
"Toal number of clusters detected: ",
length(TotalEdgeClusters)
))
NumberOfAssignedEdgeClusters <<- length(TotalEdgeClusters)
# Pritn total exe time
EndTime <- Sys.time()
TotalTime <<- EndTime - StartTime
print(TotalTime)
EdgeClusters <<- TotalEdgeClusters
NumberClusters <<- max(as.numeric(gsub("Cluster ","",ClusterImportedData$id)))
#return(list(TotalEdgeClusters=TotalEdgeClusters, ClusterImportedData=ClusterImportedData))
}
findEdgeClustersConvex("C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.pos",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full - Top-Level ROI - Cluster Analysis (Ni, Cu).csv",
"C:\\Users\\Ben\\Documents\\GitHub\\Edge-Cluster-Detection\\Test Files\\006_full.cluster.indexed.pos",
SamplingFraction,
AlphaNND)
#These functions allow one to import a pos file (sampled or not) into R with x, y, z, and mass-to-charge-ratio information
source("Test Files\\read.pos.sampled.R")
source("Test Files\\read.pos.R")
#### File paths for fundtion ####
findEdgeClustersConvex("Test Files\\006_full.pos",
"Test Files\\006_full - Top-Level ROI - Cluster Analysis (Ni, Cu).csv",
"Test Files\\006_full.cluster.indexed.pos",
SamplingFraction,
AlphaNND)
NumberOfAssignedEdgeClusters
source('~/GitHub/Edge-Cluster-Detection/Edge Cluster Detection.R')
source('~/GitHub/Edge-Cluster-Detection/Edge Cluster Detection.R')
source('~/GitHub/Edge-Cluster-Detection/Edge Cluster Detection.R')
("Test Files\\006_full.pos")
read.pos("Test Files\\006_full.pos")
ClusterPosFile <- read.pos("Test Files\\006_full.cluster.pos")
read.pos("Test Files\\006_full.cluster.pos")
source('~/GitHub/Edge-Cluster-Detection/Edge Cluster Detection.R')
clrHull_all
?convhulln
colnames(clrHull_all)
clrHull_all %>% filter(id %in% EdgeClusters)
clrIndxData
max(clrHull_all[,4])
vector("list", clrHull_all)
vector("list", 38)
clrIndxData[clrHull_all[,4]==i,1:3]
clrHull_all[,4]==i,1:3
i = 1
clrIndxData[clrHull_all[,4]==i,1:3]
clrHull_all[clrHull_all[,4]==i,1:3]
nrow(clrHull_all %>% filter(id == 1))
thisClr <- clrHull_all[clrHull_all[,4]==i,1:3]
COM <- summarise_all(thisClr,"mean")
COM
tempList<-convhulln(thisClr)
tempList
thisClr[unique(array(tempList)),1:3]
clrHull <- thisClr[unique(array(tempList)),1:3]
clrHull$id <- i
clrHull_list[[i]] <- clrHull
nrow(unique(clrHull_all$id))
unique(clrHull_all$id)
length(unique(clrHull_all$id))
clrHull_list <- vector("list", length(unique(clrHull_all$id)))
for (i in 1:length(unique(clrHull_all$id))) {
thisClr <- clrHull_all[clrHull_all[,4]==i,1:3]
COM <- summarise_all(thisClr,"mean")
tempList<-convhulln(thisClr)
clrHull <- thisClr[unique(array(tempList)),1:3]
clrHull$id <- i
clrHull_list[[i]] <- clrHull
}
clrHull_list
max(clrIndxData[,4])
clrHull_list
clrHull_list[[1]]
matrix(0.2,0.4,1.0)
as.matrix(0.2,0.4,1.0)
as.vector(0.2,0.4,1.0)
vector(0.2,0.4,1.0)
c(0.2,0.4,1.0)
inhulln(clrHull_list[[1]], c(-1.2,-0.6,1.0))
type(clrHull_list[[1]])
typeof(clrHull_list[[1]])
clrHull_list[[1]][1]
clrHull_list[[1]][1:4]
clrHull_list[[1]][1:3]
inhulln(clrHull_list[[1]][1:3], c(-1.2,-0.6,1.0))
convhulln(clrHull_list[[1]][1:3])
typef(clrHull_list[[1]][1:3])
typef(convhulln(clrHull_list[[1]][1:3]))
typeof(convhulln(clrHull_list[[1]][1:3]))
inhulln(clrHull_list[[1]][1:3], c(-1.2,-0.6,1.0))
tempList
inhulln(tempList, c(-1.2,-0.6,1.0))
inhulln(tempList, (-1.2,-0.6,1.0))
inhulln(tempList, c(-1.2,-0.6,1.0))
inhulln(tempList, c(-1,-2,3))
inhulln(tempList, c(1,2,3))
tempList$x
tempList[1]
tempList[2]
tempList[3]
tempList[,3]
tempList[4]
inhulln(tempList, cbind(1,2,3))
inhulln(tempList, cbind(-1.2,-0.6,1.0))
inhulln(tempList, rbind(-1.2,-0.6,1.0))
c
inhulln(tempList, cbind(-1.2,-0.6,1.0))
inhulln(tempList, cbind(12,4,30))
inhulln(tempList, cbind(12,4.5,30))
inhulln(tempList, cbind(12,4,1,30))
inhulln(tempList, cbind(12,4.1,30))
inhulln(tempList, cbind(-1.2,-0.6,1.0))
thisClr[unique(array(tempList)),1:3]
COM
inhulln(tempList, cbind(-3.362114, 8.642577, 17.25899))
head(ClusterPosFile)
head(ClusterPosFile)
head(matrix(ClusterPosFile))
head(as.matrix(ClusterPosFile))
head(as.matrix(ClusterPosFile %>% select(-m)))
inhulln(tempList, as.matrix(ClusterPosFile %>% select(-m)))
unique(inhulln(tempList, as.matrix(ClusterPosFile %>% select(-m))))
istrue(inhulln(tempList, as.matrix(ClusterPosFile %>% select(-m))))
isTRUE(inhulln(tempList, as.matrix(ClusterPosFile %>% select(-m))))
nrow(ClusterPosFile)
a < -inhulln(tempList, as.matrix(ClusterPosFile %>% select(-m)))
a <- inhulln(tempList, as.matrix(ClusterPosFile %>% select(-m)))
which(a,isTRUE())
which(isTRUE(a))
which(a,isTRUE())
which(a,isTRUE(a))
which(a)
which(a)
a <- inhulln(tempList, as.matrix(ClusterPosFile %>% select(-m)))
which(a)
a <- which(inhulln(tempList, as.matrix(ClusterPosFile %>% select(-m))))
b <- append(a,b)
b <- 1
a <- which(inhulln(tempList, as.matrix(ClusterPosFile %>% select(-m))))
b <- append(a,b)
b
b <- vector()
a <- which(inhulln(tempList, as.matrix(ClusterPosFile %>% select(-m))))
b <- append(a,b)
b
b <- vector()
for (i in 1:length(unique(clrHull_all$id))) {
thisClr <- clrHull_all[clrHull_all[,4]==i,1:3]
COM <- summarise_all(thisClr,"mean")
tempList<-convhulln(thisClr)
a <- which(inhulln(tempList, as.matrix(ClusterPosFile %>% select(-m))))
b <- append(a,b)
clrHull <- thisClr[unique(array(tempList)),1:3]
clrHull$id <- i
clrHull_list[[i]] <- clrHull
}
b
length(b)
nrow(ClusterPosFile)
which(inhulln(tempList, as.matrix(ClusterPosFile %>% select(-m))))
tempList
which(inhulln(tempList, as.matrix(ClusterPosFile %>% select(-m))))
which(inhulln(tempList, as.matrix(ClusterPosFile %>% select(-m))))
i = 1
thisClr <- clrHull_all[clrHull_all[,4]==i,1:3]
COM <- summarise_all(thisClr,"mean")
tempList<-convhulln(thisClr)
which(inhulln(tempList, as.matrix(ClusterPosFile %>% select(-m))))
inhulln(tempList, as.matrix(ClusterPosFile %>% select(-m)))
ClusterPosFile
length(unique(clrHull_all$id))
EdgeClusters
b <- vector()
for (i in EdgeClusters) {
thisClr <- clrHull_all[clrHull_all[,4]==i,1:3]
COM <- summarise_all(thisClr,"mean")
tempList<-convhulln(thisClr)
a <- which(inhulln(tempList, as.matrix(ClusterPosFile %>% select(-m))))
b <- append(a,b)
clrHull <- thisClr[unique(array(tempList)),1:3]
clrHull$id <- i
clrHull_list[[i]] <- clrHull
}
b
ClusterPosFile %>% slice(b)
EdgeClusterPos <- ClusterPosFile %>% slice(b)
NonEdgeClusterPos <- ClusterPosFile %>% slice(!b)
source("Test Files/writeposR.R")
writeposR(EdgeClusterPos, "Edge Clusters Ranged.pos")
getwd()
NonEdgeClusterPos <- ClusterPosFile - EdgeClusterPos
?setdiff
setdiff(ClusterPosFile,EdgeClusterPos)
writeposR(setdiff(ClusterPosFile,EdgeClusterPos), "Non Edge Clusters Ranged.pos")
IonsInEdgeClusters <- vector()
for (i in EdgeClusters) {
thisClr <- clrHull_all[clrHull_all[,4]==i,1:3]
COM <- summarise_all(thisClr,"mean")
tempList<-convhulln(thisClr)
IonsInEdgeClustersi <- which(inhulln(tempList, as.matrix(ClusterPosFile %>% select(-m))))
IonsInEdgeClusters <- append(IonsInEdgeClustersi,IonsInEdgeClusters)
clrHull <- thisClr[unique(array(tempList)),1:3]
clrHull$id <- i
clrHull_list[[i]] <- clrHull
}
IonsInEdgeClusters
EdgeClusterPos <- ClusterPosFile %>% slice(IonsInEdgeClusters)
NonEdgeClusterPos <- ClusterPosFile - EdgeClusterPos
NonEdgeClusterPos <- setdiff(ClusterPosFile,EdgeClusterPos)
source('~/GitHub/Edge-Cluster-Detection/Edge Cluster Detection.R')
EdgeClusters
source('~/GitHub/Edge-Cluster-Detection/Edge Cluster Detection.R')
source('~/GitHub/Edge-Cluster-Detection/Edge Cluster Detection.R')
source('~/GitHub/Edge-Cluster-Detection/Edge Cluster Detection.R')
?ashape3d
volume_ashape3d(AlphaHullShape, byComponents = FALSE, indexAlpha = 1)
NumberClusters
NumberOfAssignedEdgeClusters
(NumberClusters - (0.5 * NumberOfAssignedEdgeClusters))/
volume_ashape3d(AlphaHullShape, byComponents = FALSE, indexAlpha = 1)
# Calculate number density (assuming correction factor of 0.5 and that alpha volume generated around point cloud is correct)
NumberDensity = (NumberClusters - (0.5 * NumberOfAssignedEdgeClusters))/
volume_ashape3d(AlphaHullShape, byComponents = FALSE, indexAlpha = 1)*((10^-9)^3)
NumberDensity
(NumberClusters - (0.5 * NumberOfAssignedEdgeClusters))/
(volume_ashape3d(AlphaHullShape, byComponents = FALSE, indexAlpha = 1)*((10^-9)^3))
print(paste0("The number density of clusters in this dataset is: ", NumberDensity,". \n This assumes"))
print(paste0("The number density of clusters in this dataset is: ", NumberDensity,".", \n," This assumes"))
print(paste0("The number density of clusters in this dataset is: ", NumberDensity,
". This assumes volume generate by alpha shape is the correct volume of your dataset."))
print(paste0("The number density of clusters in this dataset is: ", NumberDensity,
". A correction factor of 0.5 has been used and the following assumption has been made: that the volume generated by alpha shape is the correct volume of your dataset."))
NumberDensity
round(NumberDensity,3)
ceiling(NumberDensity,3)
signif(NumberDensity,2)
signif(NumberDensity,4)
